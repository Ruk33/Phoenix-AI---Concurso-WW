package Phoenix_AI

import Vectors
import TimedLoop
import LinkedList
import Fire_Wings
import Fire_Ground
import Fire_Wall
import public AI

/**
 * Mensajes del boss
 */
string array messages
LinkedList<Phoenix_AI> bosses = new LinkedList<Phoenix_AI>

public class Phoenix_AI extends AI
	private static real countUnitsTimeOut = 8
	private static real fireGroundTimeOut = 6
	private static real fireWallTimeOut = 4

	/**
	 * Auxiliares
	 */	
	private real currentCountUnitsTimeOut = 0
	private real currentFireGroundTimeOut = 0
	private real currentFireWallTimeOut = 0
	
	/**
	 * Auxiliar
	 * Si orderFlag == 0, significa
	 * que podemos spamear orden de ataque
	 */
	private real orderFlag
	
	/**
	 * Auxiliar para bosses (variable global)
	 */
	private int linkedListIndex
	
	use TimedLoop
	
	ondestroy
		this.boss = null
		this.target = null
		
		bosses.removeAt(this.linkedListIndex)
	
	override function onTargetChanges()
		this.attackTarget()
		BJDebugMsg("¡Tu serás mi nuevo objetivo!")
		
	/**
	 * Usar habilidad Fire Wings
	 */
	function useFireWings(real x, real y, boolean showText) returns boolean
		if ( this.orderFlag == 0. and IssuePointOrder(this.boss, "shockwave", x, y) )
			this.orderFlag += fire_Wings_CASTING_TIME
			if ( showText )
				BJDebugMsg("¡Mis alas lo cubriran todo!")
			return true
			
		return false
		
	/**
	 * Usar habilidad Fire Ground
	 */
	function useFireGround(boolean showText) returns boolean
		if ( this.orderFlag == 0. and IssueImmediateOrder(this.boss, "berserk") )
			this.orderFlag += fire_Ground_CASTING_TIME
			if ( showText )
				BJDebugMsg("Siente el ardor de mis alas")
			return true
			
		return false
	
	/**
	 * Usar habilidad Fire Wall
	 */
	function useFireWall(boolean showText) returns boolean		
		if ( this.orderFlag == 0. and IssueTargetOrder(this.boss, "carrionswarm", this.target) )
			this.orderFlag += fire_Wall_CASTING_TIME
			if ( showText )
				BJDebugMsg("¡Recibe el fuego purificador!")
			return true
			
		return false
		
	/**
	 * Distancia entre el boss y el objetivo
	 */
	function distanceFromTarget() returns real
		vec2 bossLoc = vec2(this.boss.getX(), this.boss.getY())
		vec2 targetLoc = vec2(this.target.getX(), this.boss.getY())
		
		return bossLoc.distToVec(targetLoc)
	
	/**
	 * Funcion que se ejecuta cuando el boss muere
	 */	
	function onBossDied()
		BJDebugMsg("¿Como puede ser esto posible?")
	
	override function onTimedLoop()
		this.currentCountUnitsTimeOut += PERIOD
		this.currentFireGroundTimeOut += PERIOD
		this.currentFireWallTimeOut += PERIOD
		
		if ( this.orderFlag > 0 )
			this.orderFlag -= PERIOD
			
		if ( this.orderFlag < 0 )
			this.orderFlag = 0
			
		// Verificamos si el boss no estiro la pata
		if ( GetWidgetLife(this.boss) < 0.406 )
			// El boss ya murio, paramos todo
			this.onBossDied()
			this.stopTimedLoop()
			
			return
			
		// Si no tenemos objetivo o el mismo murio
		if ( this.target == null or GetWidgetLife(this.target) < 0.406 )
			// Tratamos de conseguir uno nuevo
			this.setTargetToWeaker(800)
		
		if ( this.target != null )			
			if ( this.currentCountUnitsTimeOut >= countUnitsTimeOut )
				this.currentCountUnitsTimeOut = 0
				
				// Si hay mas de 1 unidad cerca del boss
				if ( this.countEnemiesArround(600, this.boss.getX(), this.boss.getY()) >= 2 )
					// Obtenemos la unidad mas debil
					this.setTargetToWeaker(600)
					
					// Como hay varias unidades cerca, vamos a hacer
					// que el boss tenga un 35% de correr a una
					// locacion mas ventajoza
					if ( GetRandomInt(0, 100) <= 35 )
						// Buscamos un mejor lugar para el boss
						int waypointIndex = this.getConvenientLocation(400)
						
						// Verificamos si encontramos un mejor lugar
						if ( waypointIndex != -1 )
							// Nos movemos al nuevo lugar!
							vec2 waypoint = this.getLocationFromIndex(waypointIndex)
							
							if ( this.useFireWings(waypoint.x, waypoint.y, true) )
								return
			
			if ( this.currentFireGroundTimeOut >= fireGroundTimeOut )
				if ( GetRandomInt(0, 100) <= 70 and this.distanceFromTarget() < 500 )
					if ( this.useFireGround(true) )
						this.currentFireGroundTimeOut = 0
						return
			
			if ( this.currentFireWallTimeOut >= fireWallTimeOut )				
				if ( GetRandomInt(0, 100) <= 40 and this.distanceFromTarget() > 650 )
					if ( this.useFireWall(false) )
						this.currentFireWallTimeOut = 0
						return
					
			if ( this.orderFlag == 0. )
				this.attackTarget()
	
	construct(player owner)
		this.orderFlag = 0
		this.boss = CreateUnit(owner, 'h002', 0, 0, 0)
		this.target = null
		
		this.setTargetToWeaker(800)
		
		bosses.add(this)
		this.linkedListIndex = bosses.getSize() - 1
		
		this.createWaypoints(5)
		this.startTimedLoop()

function getClosestBossFromLocation(vec2 loc) returns Phoenix_AI
	vec2 bossLoc
	real distance = 999999
	real tmpDistance
	int index = -1
	int i = bosses.getSize() - 1
	unit boss
	
	while ( i > -1 )
		boss = bosses.get(i).getBoss()
		
		bossLoc = vec2(GetUnitX(boss), GetUnitY(boss))
		tmpDistance = loc.distToVec(bossLoc)
		
		if ( tmpDistance < distance )
			distance = tmpDistance
			index = i
			
		i--
		
	boss = null
	
	return bosses.get(index)
	
trigger onCastTrigger = CreateTrigger()
timer disableTriggerTimer = CreateTimer()

function enableTrigger()
	onCastTrigger.enable()

function onCast()
	if ( GetUnitTypeId(GetTriggerUnit()) != 'h000' )
		vec2 castPoint = vec2(GetSpellTargetX(), GetSpellTargetY())
		Phoenix_AI phoenix = getClosestBossFromLocation(castPoint)
		
		if ( phoenix != null )
			vec2 farWaypoint = phoenix.getLocationFromIndex(phoenix.getFarWaypointIndex(castPoint))
			
			if ( phoenix.useFireWings(farWaypoint.x, farWaypoint.y, false) == false )
				IssuePointOrder(phoenix.getBoss(), "move", farWaypoint.x, farWaypoint.y)
				
		//onCastTrigger.disable()
		//TimerStart(disableTriggerTimer, 10, false, function enableTrigger)
		

init
	messages[1] = "¡El fuego de mis alas acabará contigo!"
	messages[2] = "Nunca moriré, ¡soy inmortal!"
	messages[3] = "Eres fuerte pero, ¡nunca podrás apagar mis llamas!"
	messages[4] = "El fuego es mi aliado, el fuego me protege"
	
	onCastTrigger.registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
	onCastTrigger.addAction(function onCast)