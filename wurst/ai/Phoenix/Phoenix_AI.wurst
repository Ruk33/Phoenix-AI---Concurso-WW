package Phoenix_AI

import Vectors
import TimedLoop
import LinkedList
import Fire_Wings
import Fire_Ground
import Fire_Wall
import Basics
import Knockback
import public AI

/**
 * Mensajes del boss
 */
string array messages
LinkedList<Phoenix_AI> bosses = new LinkedList<Phoenix_AI>

public class Phoenix_AI extends AI
	private static real countUnitsTimeOut = 8
	private static real fireWingsTimeOut = 7
	private static real fireGroundTimeOut = 6
	private static real fireWallTimeOut = 3
	private static real timeOut = 2

	/**
	 * Auxiliares
	 */
	private real currentFireWingsTimeOut = 0	
	private real currentCountUnitsTimeOut = 0
	private real currentFireGroundTimeOut = 2
	private real currentFireWallTimeOut = 1
	private real currentTimeOut = 0
	
	/**
	 * Auxiliar
	 * Si orderFlag == 0, significa
	 * que podemos spamear orden de ataque
	 */
	private real orderFlag
	
	/**
	 * Auxiliar para bosses (variable global)
	 */
	private int linkedListIndex
	
	use TimedLoop
	
	ondestroy
		this.boss = null
		this.target = null
		
		bosses.removeAt(this.linkedListIndex)
	
	override function onTargetChanges()
		this.attackTarget()
		BJDebugMsg("¡Tu serás mi nuevo objetivo!")
		
	function getOrderFlag() returns real
		return this.orderFlag
		
	/**
	 * Usar habilidad Fire Wings
	 */
	function useFireWings(real x, real y, boolean showText) returns boolean		
		/*if ( this.orderFlag == 0 and IssuePointOrder(this.boss, "shockwave", x, y) )
			this.orderFlag += fire_Wings_CASTING_TIME
			if ( showText )
				BJDebugMsg("¡Mis alas lo cubriran todo!")
			return true
		*/	
		return false
		
	/**
	 * Usar habilidad Fire Ground
	 */
	function useFireGround(boolean showText) returns boolean
		if ( this.orderFlag == 0 and IssueImmediateOrder(this.boss, "berserk") )
			this.orderFlag += fire_Ground_CASTING_TIME
			if ( showText )
				BJDebugMsg("Siente el ardor de mis alas")
			return true
			
		return false
	
	/**
	 * Usar habilidad Fire Wall
	 */
	function useFireWall(boolean showText) returns boolean
		if ( this.orderFlag == 0 and IssueTargetOrder(this.boss, "carrionswarm", this.target) )
			this.orderFlag += fire_Wall_CASTING_TIME
			if ( showText )
				BJDebugMsg("¡Recibe el fuego purificador!")
			return true
			
		return false
		
	/**
	 * Distancia entre el boss y el objetivo
	 */
	function distanceFromTarget() returns real
		vec2 bossLoc = vec2(this.boss.getX(), this.boss.getY())
		vec2 targetLoc = vec2(this.target.getX(), this.boss.getY())
		
		return bossLoc.distToVec(targetLoc)
	
	/**
	 * Funcion que se ejecuta cuando el boss muere
	 */	
	function onBossDied()
		BJDebugMsg("¿Como puede ser esto posible?")
		
	function moveToLoc(vec2 loc) returns boolean
		if ( this.orderFlag == 0 and IssuePointOrder(this.boss, "move", loc.x, loc.y) )
			/*vec2 casterLoc = vec2(this.boss.getX(), this.boss.getY())
			angle a = casterLoc.angleTo(loc)
			
			this.boss.setFacing(a)
			new Knockback(this.boss, this.boss, 600, 1.7, a)*/
			
			this.orderFlag += 2
			return true
		return false
	
	override function onTimedLoop()			
		if ( this.orderFlag > 0 )
			this.orderFlag -= 0.03125
			
		if ( this.orderFlag < 0 )
			this.orderFlag = 0
		
		if ( this.orderFlag != 0 )
			return
			
		this.currentCountUnitsTimeOut += 0.03125
		this.currentFireWingsTimeOut += 0.03125
		this.currentFireGroundTimeOut += 0.03125
		this.currentFireWallTimeOut += 0.03125
		this.currentTimeOut += 0.03125
		
		/*if ( this.currentTimeOut < timeOut )
			return
		else
			this.currentTimeOut = 0*/
			
		// Verificamos si el boss no estiro la pata
		if ( GetWidgetLife(this.boss) < 0.406 )
			// El boss ya murio, paramos todo
			this.onBossDied()
			this.stopTimedLoopAndDestroy()
			
			return
			
		// Si no tenemos objetivo o el mismo murio
		if ( this.target == null or IsUnitType(this.target, UNIT_TYPE_DEAD) )
			// Tratamos de conseguir uno nuevos
			this.setTargetToWeaker(800)
		
		if ( this.target != null )				
			if ( GetRandomInt(0, 300) <= 1 )
				DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 7, messages[GetRandomInt(1, 8)])
			
			real distanceFromTarget = this.distanceFromTarget()

			if ( this.currentCountUnitsTimeOut >= countUnitsTimeOut )
				this.currentCountUnitsTimeOut = 0
				
				// Si hay mas de 1 unidad cerca del boss
				if ( this.countEnemiesArround(800, this.boss.getX(), this.boss.getY()) >= 2 )
					// Obtenemos la unidad mas debil
					this.setTargetToWeaker(800)
			
			if ( this.currentFireGroundTimeOut >= fireGroundTimeOut )
				if ( GetRandomInt(0, 100) <= 70 and distanceFromTarget <= 300 )
					if ( this.useFireGround(true) )
						this.currentFireGroundTimeOut = 0
						return
				
			// Como hay varias unidades cerca, vamos a hacer
			// que el boss tenga un 35% de correr a una
			// locacion mas ventajoza
			if ( this.currentFireWingsTimeOut >= fireWingsTimeOut )
				if ( GetRandomInt(0, 100) <= 50 and distanceFromTarget < 200 )
					vec2 waypoint
					int waypointIndex = this.getConvenientLocation(400)
						
					if ( waypointIndex != -1 )
						waypoint = this.getLocationFromIndex(waypointIndex)
						if ( this.moveToLoc(waypoint) )
							this.currentFireWingsTimeOut = 0
							return
			
			if ( this.currentFireWallTimeOut >= fireWallTimeOut )				
				if ( GetRandomInt(0, 100) <= 90 and distanceFromTarget > 400 )
					if ( this.useFireWall(true) )
						this.currentFireWallTimeOut = 0
						return
						
			this.attackTarget()
	
	construct(player owner)
		this.orderFlag = 0
		this.boss = CreateUnit(owner, 'h002', 0, 0, 0)
		this.target = null
		
		this.setTargetToWeaker(800)
		
		this.linkedListIndex = bosses.getSize()
		bosses.add(this)
		
		this.createWaypoints(5)
		this.startTimedLoop()

function getClosestBossFromLocation(vec2 loc) returns Phoenix_AI
	vec2 bossLoc
	real distance = 999999
	real tmpDistance
	int i = bosses.getSize() - 1
	Phoenix_AI tmpPhoenix
	Phoenix_AI phoenix = null
	unit boss
	
	while ( i > -1 )
		tmpPhoenix = bosses.get(i)
		boss = tmpPhoenix.getBoss()
		
		bossLoc = vec2(GetUnitX(boss), GetUnitY(boss))
		tmpDistance = loc.distToVec(bossLoc)
		
		if ( tmpDistance < distance and tmpPhoenix.getOrderFlag() == 0. )
			phoenix = tmpPhoenix
			distance = tmpDistance
			
		i--
		
	boss = null
	
	return phoenix

function onCastActions()
	int unitTypeId = GetUnitTypeId(GetTriggerUnit())
	
	if ( unitTypeId != 'h002' and unitTypeId != DUMMY_UNIT_ID )
		vec2 castPoint = vec2(GetSpellTargetX(), GetSpellTargetY())
		Phoenix_AI phoenix = getClosestBossFromLocation(castPoint)
		
		if ( phoenix != null )
			vec2 farWaypoint = phoenix.getLocationFromIndex(phoenix.getFarWaypointIndex(castPoint))
			
			if ( phoenix.useFireWings(farWaypoint.x, farWaypoint.y, false) == false )
				phoenix.moveToLoc(farWaypoint)

init
	messages[1] = "¡El fuego de mis alas acabará contigo!"
	messages[2] = "Nunca moriré, ¡soy inmortal!"
	messages[3] = "Eres fuerte pero, ¡nunca podrás apagar mis llamas!"
	messages[4] = "El fuego es mi aliado, el fuego me protege"
	messages[5] = "¡Observa la majestuosidad del fuego!"
	messages[6] = "El fuego te alcanzará y de ti solo cenizas quedara"
	messages[7] = "¡Mi alma es fuego puro!"
	messages[8] = "No eres rival para mi, ¡nadie lo es!"
	
	trigger onCastTrigger = CreateTrigger()
	
	onCastTrigger.registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
	onCastTrigger.addAction(function onCastActions)
	
	onCastTrigger = null